// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// derivative_coeffient_matrix
arma::mat derivative_coeffient_matrix(const int m, const int p);
RcppExport SEXP polygrams_derivative_coeffient_matrix(SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(derivative_coeffient_matrix(m, p));
    return rcpp_result_gen;
END_RCPP
}
// integral_coeffient_matrix
arma::mat integral_coeffient_matrix(const int m, const int p);
RcppExport SEXP polygrams_integral_coeffient_matrix(SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(integral_coeffient_matrix(m, p));
    return rcpp_result_gen;
END_RCPP
}
// dbernstein_cpp
arma::vec dbernstein_cpp(const arma::Col<double>& x, const arma::Col<double>& lambda, const arma::vec& support, const bool& log);
RcppExport SEXP polygrams_dbernstein_cpp(SEXP xSEXP, SEXP lambdaSEXP, SEXP supportSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::Col<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::Col<double>& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dbernstein_cpp(x, lambda, support, log));
    return rcpp_result_gen;
END_RCPP
}
// pbernstein_cpp
arma::vec pbernstein_cpp(const arma::Col<double>& q, const arma::Col<double>& lambda, const arma::vec& support, const bool& log);
RcppExport SEXP polygrams_pbernstein_cpp(SEXP qSEXP, SEXP lambdaSEXP, SEXP supportSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::Col<double>& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::Col<double>& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(pbernstein_cpp(q, lambda, support, log));
    return rcpp_result_gen;
END_RCPP
}
// dxbernstein_cpp
arma::vec dxbernstein_cpp(const arma::Col<double>& x, const arma::Col<double>& lambda, const arma::vec& support, const int& p, const bool& log);
RcppExport SEXP polygrams_dxbernstein_cpp(SEXP xSEXP, SEXP lambdaSEXP, SEXP supportSEXP, SEXP pSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::Col<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::Col<double>& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dxbernstein_cpp(x, lambda, support, p, log));
    return rcpp_result_gen;
END_RCPP
}
// dxpolygram_cpp
arma::vec dxpolygram_cpp(const arma::vec& x, const arma::vec& w, const arma::Col<int>& ms, const arma::vec& s_aug, const int& p, const bool log);
RcppExport SEXP polygrams_dxpolygram_cpp(SEXP xSEXP, SEXP wSEXP, SEXP msSEXP, SEXP s_augSEXP, SEXP pSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type ms(msSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_aug(s_augSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dxpolygram_cpp(x, w, ms, s_aug, p, log));
    return rcpp_result_gen;
END_RCPP
}
// polygram_objective_vector
arma::vec polygram_objective_vector(arma::vec x, const arma::Col<int>& ms, const arma::vec& s, const arma::vec& support);
RcppExport SEXP polygrams_polygram_objective_vector(SEXP xSEXP, SEXP msSEXP, SEXP sSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type ms(msSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(polygram_objective_vector(x, ms, s, support));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"polygrams_derivative_coeffient_matrix", (DL_FUNC) &polygrams_derivative_coeffient_matrix, 2},
    {"polygrams_integral_coeffient_matrix", (DL_FUNC) &polygrams_integral_coeffient_matrix, 2},
    {"polygrams_dbernstein_cpp", (DL_FUNC) &polygrams_dbernstein_cpp, 4},
    {"polygrams_pbernstein_cpp", (DL_FUNC) &polygrams_pbernstein_cpp, 4},
    {"polygrams_dxbernstein_cpp", (DL_FUNC) &polygrams_dxbernstein_cpp, 5},
    {"polygrams_dxpolygram_cpp", (DL_FUNC) &polygrams_dxpolygram_cpp, 6},
    {"polygrams_polygram_objective_vector", (DL_FUNC) &polygrams_polygram_objective_vector, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_polygrams(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
