% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functionals.R
\name{moment_functionals}
\alias{moment_functionals}
\alias{mean_polygram}
\alias{moment_polygram}
\alias{central_moment_polygram}
\alias{var_polygram}
\alias{sd_polygram}
\alias{skewness_polygram}
\alias{kurtosis_polygram}
\title{Moments, central moments, mean, variance, standard deviation, skewness and
(excess) kurtosis for Bernstein polygrams.}
\usage{
mean_polygram(polygram_object)

moment_polygram(polygram_object, moment = 1)

central_moment_polygram(polygram_object, moment = 2)

var_polygram(polygram_object)

sd_polygram(polygram_object)

skewness_polygram(polygram_object)

kurtosis_polygram(polygram_object, excess = FALSE)
}
\arguments{
\item{polygram_object}{a polygram object.}

\item{moment}{positive integer, specifying which moment to calculate.}

\item{excess}{logical, only for kurtosis; if  \code{TRUE} (default), the excess kurtosis is calculated.}
}
\value{
\code{mean} returns the expected value, \code{var} the variance, \code{sd} the standard deviation,
\code{moment} the pth moment, \code{central_moment} the pth central moment, \code{skewness} the skewness,
and \code{kurtosis} the kurtosis.
}
\description{
Moments, central moments, mean, variance, standard deviation, skewness and
(excess) kurtosis for Bernstein polygrams.
}
\details{
A Bernstein polygram on [a, b] is disjoint mixture of rescaled Bernstein densities on subintervals
of [a, b]. Such polygrams can be used for non-parametric density estimation, as an alternative to logsplines
and kernel density estimation. These functions help with calculating moments.
}
\section{Functions}{
\itemize{
\item \code{mean_polygram}: Calculates the mean of a Bernstein polygram.

\item \code{moment_polygram}: Calculates the pth moment of a Bernstein polygram.

\item \code{central_moment_polygram}: Calculates the pth central moment of a Bernstein polygram.

\item \code{var_polygram}: Calculates the variance of a Bernstein polygram.

\item \code{sd_polygram}: Calculates the standard deviation of a Bernstein polygram.

\item \code{skewness_polygram}: Calculates the skewness of a Bernstein polygram.

\item \code{kurtosis_polygram}: Calculates the (excess) kurtosis of a Bernstein polygram.
}}

\examples{
## Do a parametric bootstrap.
set.seed(1337)
data = rbeta(200, 2, 7)
polygram_object = polygram(data, s = 3, m = 4)
current_median = qpolygram(0.5, polygram_object)
medians = replicate(100, {
  new_data = rpolygram(200, polygram_object)
  new_median = qpolygram(0.5, polygram(new_data, s = 3, m = 4))
  new_median
})
plot(polygram(sqrt(200)*(current_median - medians), s = 4, m = 4,
              support = c(-1,1)))
}
